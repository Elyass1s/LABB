public class Book {
    private String title;
    private String author;
    private int year;

    public Book(String title, int year, String author) {
        this.title = title;
        this.year = year;
        this.author = author;
    }

    public String getTitle() {
        return title;
    }

    public void setTitle(String title) {
        this.title = title;
    }

    public String getAuthor() {
        return author;
    }

    public void setAuthor(String author) {
        this.author = author;
    }

    public int getYear() {
        return year;
    }

    public void setYear(int year) {
        this.year = year;
    }

    public void bookInfo() {
        System.out.println("Title: " + title + " / Author: " + author + " / Year: " + year);
    }

    public void printBookDetails() {
        System.out.println("Book Details:");
        System.out.println("Title: " + title);
        System.out.println("Author: " + author);
        System.out.println("Year: " + year);
    }
}


class PrintedBook extends Book {
    private int numbOfPages;
    private String publisher;
    private double price;

    public PrintedBook(String title, int year, String author, int numbOfPages, String publisher, double price) {
        super(title, year, author);
        this.numbOfPages = numbOfPages;
        this.publisher = publisher;
        this.price = price;
    }

    public int getNumbOfPages() {
        return numbOfPages;
    }

    public void setNumbOfPages(int numbOfPages) {
        this.numbOfPages = numbOfPages;
    }

    public String getPublisher() {
        return publisher;
    }

    public void setPublisher(String publisher) {
        this.publisher = publisher;
    }

    public void bookType() {
        System.out.println("This is a printed book");
    }

    @Override
    public void bookInfo() {
        super.bookInfo();
        System.out.println("Publisher: " + publisher + " / Pages: " + numbOfPages);
    }

    @Override
    public void printBookDetails() {
        super.printBookDetails();
        System.out.println("Publisher: " + publisher);
        System.out.println("Number of pages: " + numbOfPages);
        System.out.println("PriceTOTAL: $" + getPrice());
    }

    public void printBook() {
        System.out.println("Printing the book...");
    }

    public double getPrice() {
        return price=price*numbOfPages;
    }

    public void setPrice(double price) {
        this.price = price;
    }
}


class EBook extends Book {
    private double fileSizeMB;
    private String fileFormat;
    private double price;

    public EBook(String title, int year, String author, double fileSizeMB, String fileFormat, double price) {
        super(title, year, author);
        this.fileSizeMB = fileSizeMB;
        this.fileFormat = fileFormat;
        this.price = price;
    }

    public double getFileSizeMB() {
        return fileSizeMB;
    }

    public void setFileSizeMB(double fileSizeMB) {
        this.fileSizeMB = fileSizeMB;
    }

    public String getFileFormat() {
        return fileFormat;
    }

    public void setFileFormat(String fileFormat) {
        this.fileFormat = fileFormat;
    }

    public void bookType() {
        System.out.println("This is an Ebook");
    }

    @Override
    public void bookInfo() {
        super.bookInfo();
        System.out.println("Size: " + fileSizeMB + "MB / Format: " + fileFormat);
    }

    @Override
    public void printBookDetails() {
        super.printBookDetails();
        System.out.println("File Size: " + fileSizeMB + "MB");
        System.out.println("Format: " + fileFormat);
        System.out.println("PriceTOTALL: $" + getPrice());
    }

    public double getPrice() {
        return price=price*fileSizeMB;
    }
}

 class Testing {
    public static void main(String[] args) {
        System.out.println("    _Наш основной класс_   ");
        Book book = new Book("AIT", 2007, "Elya");
        book.printBookDetails();

        System.out.println("\n    _Наш подкласс PrintedBook_   ");
        PrintedBook printedBook = new PrintedBook("MagicPower", 2000, "Godjo Satoru", 1587, "Anime", 0.7);
        printedBook.printBookDetails();
        printedBook.bookType();
        printedBook.printBook();

        System.out.println("\n    _Наш подкласс EBook_   ");
        EBook ebook = new EBook("Clean Code", 2008, "Robert C. Martin", 5.2, "PDF", 1);
        ebook.printBookDetails();
        ebook.bookType();
    }
}
//Сверху выполнено два дополнительных задания 1)добавлен метод в принтед бук 2)при создание обьекта мы вводим цену за одну страницу или за размер памяти и он нам ввыводит полную сумму
//Внизу третье доп задание
/*
class PrintedBook extends Book {
    private int numbOfPages;
    private String publisher;
    private double price;


    public PrintedBook(String title, int year, String author, int numbOfPages) {
        super(title, year, author);
        this.numbOfPages = numbOfPages;
        this.publisher = "Unknown"; //по умолчанию
        this.price = 0.0;
    }

    // Конструктор второй
    public PrintedBook(String title, int year, String author, int numbOfPages, String publisher, double price) {
        super(title, year, author);
        this.numbOfPages = numbOfPages;
        this.publisher = publisher;
        this.price = price;
    }

    @Override
    public void printBookDetails() {
        super.printBookDetails();
        System.out.println("Publisher: " + publisher);
        System.out.println("Number of pages: " + numbOfPages);
        System.out.println("Price: $" + price);
    }
}
class EBook extends Book {
    private double fileSizeMB;
    private String fileFormat;
    private double price;

    // Конструктор ервый
    public EBook(String title, int year, String author, double fileSizeMB) {
        super(title, year, author);
        this.fileSizeMB = fileSizeMB;
        this.fileFormat = "Unknown"; //по умолчанию
        this.price = 0.0;
    }

    // Конструктор второй
    public EBook(String title, int year, String author, double fileSizeMB, String fileFormat, double price) {
        super(title, year, author);
        this.fileSizeMB = fileSizeMB;
        this.fileFormat = fileFormat;
        this.price = price;
    }

    @Override
    public void printBookDetails() {
        super.printBookDetails();
        System.out.println("File Size: " + fileSizeMB + "MB");
        System.out.println("Format: " + fileFormat);
        System.out.println("Price: $" + price);
    }
}
public class Testing {
    public static void main(String[] args) {
        System.out.println("    _Тестируем PrintedBook_   ");
        PrintedBook book1 = new PrintedBook("Harry Potter", 1997, "J.K. Rowling", 350);
        PrintedBook book2 = new PrintedBook("The Lord of the Rings", 1954, "J.R.R. Tolkien", 1200, "Allen & Unwin", 29.99);

        book1.printBookDetails();
        book2.printBookDetails();

        System.out.println("\n    _Тестируем EBook_   ");
        EBook ebook1 = new EBook("1984", 1949, "George Orwell", 1.5);
        EBook ebook2 = new EBook("Java Programming", 2021, "John Doe", 15.3, "PDF", 12.99);

        ebook1.printBookDetails();
        ebook2.printBookDetails();
    }
}

 */
//Все заключается в том что если мы преписываем параметры недоконца то срабатывает то что мы вписали по умолчанию)
